---
description: 
globs: 
alwaysApply: true
---
# Supabase Usage & Migration Policy

## Golden Rule
All database schema changes **must** be made via migration files committed to git. **Do not** make direct changes through the Supabase dashboard or MCP for schema changes.

## Why?
- Ensures every schema change is tracked, reviewable, and reproducible.
- Prevents schema drift between environments (dev, staging, prod).
- Enables smooth team collaboration and CI/CD.

## How to Add a Migration
1. **Create a migration:**
   - Use the Supabase CLI or your preferred tool to generate a migration SQL file in `supabase/migrations/` or `backend/supabase/migrations/`.
   - Example: `supabase migration new <name>` or manually add a SQL file.
2. **Edit the migration:**
   - Write the SQL for your schema change (e.g., `ALTER TABLE ...`).
3. **Run the migration locally:**
   - Apply it to your local/dev database to test: `supabase db reset` or `supabase db push` (see Supabase docs for details).
4. **Commit the migration file:**
   - `git add supabase/migrations/<your-migration>.sql`
   - `git commit -m "feat: add <description> migration"`
5. **Push and deploy:**
   - When deploying, ensure all migrations are applied in order to the target environment.

## Never Do This
- Do **not** add, drop, or alter tables/columns directly in the Supabase dashboard for production or shared environments.
- Do **not** use MCP for schema changes unless you immediately export the SQL and add it as a migration file.

## Summary
> **All schema changes = migration files in git.**
> This is non-negotiable for team projects and production.
