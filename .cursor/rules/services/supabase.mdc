---
description: 
globs: 
alwaysApply: true
---
# Supabase Usage & Migration Policy

## Golden Rule
All database schema changes **must** be made via migration files committed to git. **Do not** make direct changes through the Supabase dashboard or MCP for schema changes.

## Why?
- Ensures every schema change is tracked, reviewable, and reproducible.
- Prevents schema drift between environments (dev, staging, prod).
- Enables smooth team collaboration and CI/CD.

## How to Add a Migration
1. **Create a migration:**
   - Use the Supabase CLI or your preferred tool to generate a migration SQL file in `supabase/migrations/` or `backend/supabase/migrations/`.
   - Example: `supabase migration new <name>` or manually add a SQL file.
2. **Edit the migration:**
   - Write the SQL for your schema change (e.g., `ALTER TABLE ...`).
3. **Run the migration locally:**
   - Apply it to your local/dev database to test: `supabase db reset` or `supabase db push` (see Supabase docs for details).
4. **Commit the migration file:**
   - `git add supabase/migrations/<your-migration>.sql`
   - `git commit -m "feat: add <description> migration"`
5. **Push and deploy:**
   - When deploying, ensure all migrations are applied in order to the target environment.

## Migration File Naming Convention
**All migration files must follow this exact naming pattern:**

`YYYYMMDD-descriptive-name-with-hyphens.sql`

### Format Requirements:
- **Timestamp prefix:** Use current date in `YYYYMMDD` format (e.g., `20240613`)
- **Separator:** Single hyphen (`-`) after timestamp
- **Description:** Descriptive name using lowercase letters, numbers, and hyphens only
- **Word separation:** Use hyphens (`-`) between words, never underscores or spaces
- **File extension:** Always `.sql`

### Examples:
```
✅ CORRECT:
20240613-add-auth-user-trigger.sql
20240614-add-preferences-to-profiles.sql
20240615-create-posts-table.sql
20240616-update-user-roles-enum.sql

❌ INCORRECT:
add_user_table.sql                    (missing timestamp)
20240613_add_user_table.sql          (underscores instead of hyphens)
20240613-Add-User-Table.sql          (uppercase letters)
20240613-add user table.sql          (spaces)
migration-001.sql                     (non-descriptive name)
```

### Why This Convention?
- **Chronological ordering:** Timestamp ensures migrations are applied in correct order
- **Readability:** Descriptive names make it easy to understand what each migration does
- **Consistency:** Uniform naming prevents confusion and merge conflicts
- **Tooling compatibility:** Works seamlessly with Supabase CLI and git workflows

## Never Do This
- Do **not** add, drop, or alter tables/columns directly in the Supabase dashboard for production or shared environments.
- Do **not** use MCP for schema changes unless you immediately export the SQL and add it as a migration file.

## Summary
> **All schema changes = migration files in git.**
> This is non-negotiable for team projects and production.
